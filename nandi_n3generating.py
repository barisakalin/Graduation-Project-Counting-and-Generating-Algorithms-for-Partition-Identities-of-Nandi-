# -*- coding: utf-8 -*-
"""nandi_n3generating.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1m__0EOK4YVzr2OgJQIDDW2ILEFkMZ6_x
"""

n = int(input("Integer: "))

min_array = [4]
m = 1
sum = 2
increment = 4
while sum <= n:
  min_array.append(sum)
  sum += increment
  if sum <= n:
    m += 1
  increment += 2

n1_partitions = [[[]for j in range(n+1)] for k in range(m+1)]
n1_partitions_bool = [[[]for j in range(n+1)] for k in range(m+1)]
n3_partitions_bool = [[[]for j in range(n+1)] for k in range(m+1)]

for i in range(4,n+1):
  n1_partitions[1][i].append([i])
  n1_partitions_bool[1][i].append([True])
  n3_partitions_bool[1][i].append([True])

n1_partitions[1][2].append([2])
n1_partitions_bool[1][2].append([True])
n3_partitions_bool[1][2].append([False])


for i in range(1,m):
  for j in range(min_array[i],n+1):
    for x in range(0,len(n1_partitions[i][j])):
      curr_num = n1_partitions[i][j][x][0]
      while curr_num + j <= n:
        #print(i,j,curr_num)
        if curr_num == n1_partitions[i][j][x][0] + 1: #[1]
          curr_num += 1
          continue
        elif n3_partitions_bool[i][j][x] == [False] and curr_num == n1_partitions[i][j][x][0] + 2: #2+4+6...'ya 2 eklenmesi
          new_partition = [curr_num]
          new_partition.extend(n1_partitions[i][j][x])
          n1_partitions[i+1][j+curr_num].append(new_partition)
          new_bool_partition = [True]
          n3_bool_partition = [False]
          n1_partitions_bool[i+1][j+curr_num].append(new_bool_partition)
          n3_partitions_bool[i+1][j+curr_num].append(n3_bool_partition)
          curr_num += 1
        elif n3_partitions_bool[i][j][x] == [False] and curr_num == n1_partitions[i][j][x][0] + 3: #2+4+6...'ya 3 eklenmesi
          curr_num += 1
          continue
        elif i > 1 and curr_num == n1_partitions[i][j][x][0] and n1_partitions[i][j][x][0] == n1_partitions[i][j][x][1]: #[0,0]
          curr_num += 1
          continue
        elif i > 1 and curr_num == n1_partitions[i][j][x][0] and n1_partitions[i][j][x][0] == n1_partitions[i][j][x][1] + 2: #[0,2]
          curr_num += 1
          continue
        elif i > 1 and curr_num == n1_partitions[i][j][x][0] + 2 and n1_partitions[i][j][x][0] == n1_partitions[i][j][x][1]: #[2,0]
          curr_num += 1
          continue
        elif i > 1 and curr_num == n1_partitions[i][j][x][0] and n1_partitions[i][j][x][0] == n1_partitions[i][j][x][1] + 3: #[0,3]
          curr_num += 1
          continue
        elif i > 1 and curr_num == n1_partitions[i][j][x][0] + 3 and n1_partitions[i][j][x][0] == n1_partitions[i][j][x][1] and (curr_num + n1_partitions[i][j][x][0] + n1_partitions[i][j][x][1]) % 2 == 1: #[3,0] odd case
          curr_num += 1
          continue
        elif i > 1 and curr_num == n1_partitions[i][j][x][0] + 3 and n1_partitions[i][j][x][0] == n1_partitions[i][j][x][1] and (curr_num + n1_partitions[i][j][x][0] + n1_partitions[i][j][x][1]) % 2 == 0: #[3,0] even case
          new_partition = [curr_num]
          new_partition.extend(n1_partitions[i][j][x])
          n1_partitions[i+1][j+curr_num].append(new_partition)
          new_bool_partition = [False]
          n3_bool_partition = [True]
          n1_partitions_bool[i+1][j+curr_num].append(new_bool_partition)
          n3_partitions_bool[i+1][j+curr_num].append(n3_bool_partition)
          curr_num += 1
        elif i > 1 and curr_num == n1_partitions[i][j][x][0] and n1_partitions[i][j][x][0] == n1_partitions[i][j][x][1] + 4 and (curr_num + n1_partitions[i][j][x][0] + n1_partitions[i][j][x][1]) % 2 == 1: #[0,4]
          curr_num += 1
          continue
        elif i > 1 and curr_num == n1_partitions[i][j][x][0] + 4 and n1_partitions[i][j][x][0] == n1_partitions[i][j][x][1] and (curr_num + n1_partitions[i][j][x][0] + n1_partitions[i][j][x][1]) % 2 == 1: #[4,0]
          curr_num += 1
          continue
        elif n1_partitions_bool[i][j][x] == [False] and curr_num == n1_partitions[i][j][x][0] + 2: #[3,0]'a 2 eklenmesi durumu
          new_partition = [curr_num]
          new_partition.extend(n1_partitions[i][j][x])
          n1_partitions[i+1][j+curr_num].append(new_partition)
          new_bool_partition = [False]
          n1_partitions_bool[i+1][j+curr_num].append(new_bool_partition)
          n3_bool_partition = [True]
          n3_partitions_bool[i+1][j+curr_num].append(n3_bool_partition)
          curr_num += 1
        elif n1_partitions_bool[i][j][x] == [False] and curr_num == n1_partitions[i][j][x][0] + 3: #[3,0]'a 3 eklenmesi durumu
          curr_num += 1
          continue
        else:
          new_partition = [curr_num]
          new_partition.extend(n1_partitions[i][j][x])
          n1_partitions[i+1][j+curr_num].append(new_partition)
          n3_bool_partition = [True]
          n3_partitions_bool[i+1][j+curr_num].append(n3_bool_partition)
          new_bool_partition = [True]
          n1_partitions_bool[i+1][j+curr_num].append(new_bool_partition)
          curr_num += 1

count = 0
for a in range(1,m+1):
  for part in n1_partitions[a][n]:
    print(part)
    count += 1

print("Count:", count)

#print(n1_partitions)